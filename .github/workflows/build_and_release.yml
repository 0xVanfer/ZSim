name: Build and Release ZZZ Simulator

# 仅在推送 v* 格式的 tag 时触发
on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    # 在最新的 Windows, macOS, Ubuntu 环境中运行
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 步骤 3: 安装项目依赖和 Nuitka
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install . pyinstaller

      # 步骤 4: 使用 PyInstaller 构建 GUI 应用 (webview_app.py)
      - name: Build GUI App with PyInstaller (webview_app.py)
        run: |
          pyinstaller --noconfirm --clean --distpath dist/zsim-app-${{ matrix.os }} \
            --name "ZZZ-Simulator" \
            --add-data "zsim/data:zsim/data" \
            --add-data "docs:docs" \
            ${{ matrix.os == 'windows-latest' && '--noconsole --windowed' || '' }} \
            ${{ matrix.os == 'macos-latest' && '--windowed --osx-bundle-identifier com.zzz.simulator' || '' }} \
            zsim/webview_app.py
        shell: bash # 使用 bash 以确保跨平台命令换行符一致性

      # 步骤 5: 使用 PyInstaller 构建 CLI 应用 (run.py)
      - name: Build CLI App with PyInstaller (run.py)
        run: |
          pyinstaller --noconfirm --clean --distpath dist/zsim-cli-${{ matrix.os }} \
            --name "zzz-simulator-cli" \
            --add-data "zsim/data:zsim/data" \
            --add-data "docs:docs" \
            zsim/run.py
        shell: bash

      # 步骤 6: 归档 GUI 构建结果 (上传整个文件夹内容)
      - name: Archive GUI artifact
        uses: actions/upload-artifact@v4
        with:
          name: zsim-app-${{ matrix.os }}
          # 上传 dist/zsim-app-<os> 目录下的所有内容
          path: dist/zsim-app-${{ matrix.os }}/**

      # 步骤 7: 归档 CLI 构建结果 (上传整个文件夹内容)
      - name: Archive CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: zsim-cli-${{ matrix.os }}
          # 上传 dist/zsim-cli-<os> 目录下的所有内容
          path: dist/zsim-cli-${{ matrix.os }}/**
  # ===== 新增审批环节 =====
  approval:
    name: Release Approval
    needs: build  # 依赖构建作业完成
    runs-on: ubuntu-latest
    environment: production-release  # 关联审批环境
    
    steps:
      - name: Wait for approval
        run: |
          echo "构建已完成，等待人工审批..."
          echo "版本: ${{ github.ref_name }}"
          echo "将在 15 分钟后超时"
  # 发布 Job：在所有平台的 build job 成功后运行
  release:
    name: Create GitHub Release
    needs: [build, approval] # 依赖于 build job
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要写权限来创建 Release 和上传资源

    steps:
      # 步骤 1: 检出代码 (可选，如果需要在 Release Note 中引用代码)
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤 2: 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        # 将所有 artifact 下载到 artifacts/ 目录下，每个 artifact 一个子目录
        with:
          path: artifacts

      # 步骤 3: 从触发工作流的 ref 中提取 tag 名称
      - name: Get tag name
        id: get_tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # 步骤 4: 将下载的 artifact 文件夹压缩成 zip 文件
      - name: Zip artifacts
        run: |
          cd artifacts
          # 遍历 artifacts 目录下的所有子目录 (即每个平台的构建结果)
          for dir in *; do
            if [ -d "$dir" ]; then
              # 将目录压缩成同名的 zip 文件
              zip -r "${dir}.zip" "$dir"
            fi
          done
          cd .. # 返回上一级目录

      # 步骤 5: 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          # GITHUB_TOKEN 是 GitHub Actions 自动提供的 secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 使用提取的 tag 名称
          tag_name: ${{ steps.get_tag.outputs.tag_name }}
          # Release 的标题
          release_name: Release ${{ steps.get_tag.outputs.tag_name }}
          # Release 的描述内容
          body: |
            Automated release for version ${{ steps.get_tag.outputs.tag_name }}.
            Contains builds for Windows, macOS, and Linux (GUI and CLI).
          draft: false # 不是草稿
          prerelease: false # 不是预发布版本

      # 步骤 6: 上传 Windows GUI App 压缩包
      - name: Upload Release Asset (App Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 从上一步获取上传 URL
          asset_path: ./artifacts/zsim-app-windows-latest.zip # 压缩文件的路径
          asset_name: zzz-simulator-app-windows.zip # 在 Release 中显示的文件名
          asset_content_type: application/zip # 文件类型

      # 步骤 7: 上传 Windows CLI App 压缩包
      - name: Upload Release Asset (CLI Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zsim-cli-windows-latest.zip
          asset_name: zzz-simulator-cli-windows.zip
          asset_content_type: application/zip

      # 步骤 8: 上传 macOS GUI App 压缩包
      - name: Upload Release Asset (App macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zsim-app-macos-latest.zip
          asset_name: zzz-simulator-app-macos.zip
          asset_content_type: application/zip

      # 步骤 9: 上传 macOS CLI App 压缩包
      - name: Upload Release Asset (CLI macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zsim-cli-macos-latest.zip
          asset_name: zzz-simulator-cli-macos.zip
          asset_content_type: application/zip

      # 步骤 10: 上传 Linux GUI App 压缩包
      - name: Upload Release Asset (App Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zsim-app-ubuntu-latest.zip
          asset_name: zzz-simulator-app-linux.zip
          asset_content_type: application/zip

      # 步骤 11: 上传 Linux CLI App 压缩包
      - name: Upload Release Asset (CLI Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/zsim-cli-ubuntu-latest.zip
          asset_name: zzz-simulator-cli-linux.zip
          asset_content_type: application/zip
