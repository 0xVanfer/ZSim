from Buff import Buff
from Enemy import Enemy
import sys


class LyconAdditionalAbilityStunVulnerability(Buff.BuffLogic):
    """
    该buff的退出逻辑特殊，失衡结束就会直接退出。

    """
    def __init__(self, buff_instance):
        super().__init__(buff_instance)
        self.buff_instance = buff_instance
        self.xjudge = self.special_judge_logic
        self.xexit = self.special_exit_logic
        self.last_stun_statement = False

    def special_exit_logic(self):
        """
        该buff和莱特的核心被动失衡时间延长是一样的，都是要在失衡期消失的时候检测退出。
        获取当前失衡值，和上一次失衡值对比。
        """
        main_module = sys.modules['__main__']
        enemy = main_module.schedule_data.enemy
        if not isinstance(enemy, Enemy):
            raise TypeError(f'获取的enemy类型不对')
        if self.last_stun_statement and not enemy.dynamic.stun:
            self.last_stun_statement = enemy.dynamic.stun
            return True
        else:
            self.last_stun_statement = enemy.dynamic.stun
            return False

    def special_judge_logic(self):
        """
        进入机制。获取当前skillNode并且检测当前怪物的失衡状态，两者都符合才触发。
        """
        main_module = sys.modules['__main__']
        enemy = main_module.schedule_data.enemy
        info_dict = main_module.schedule_data.judge_required_info_dict
        skill_node = info_dict['skill_node']
        if '1141' in skill_node.skill_tag and enemy.dynamic.stun:
            return True
        else:
            return False




